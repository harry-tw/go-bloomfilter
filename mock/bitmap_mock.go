// Code generated by MockGen. DO NOT EDIT.
// Source: ./bitmap.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBitmap is a mock of Bitmap interface.
type MockBitmap struct {
	ctrl     *gomock.Controller
	recorder *MockBitmapMockRecorder
}

// MockBitmapMockRecorder is the mock recorder for MockBitmap.
type MockBitmapMockRecorder struct {
	mock *MockBitmap
}

// NewMockBitmap creates a new mock instance.
func NewMockBitmap(ctrl *gomock.Controller) *MockBitmap {
	mock := &MockBitmap{ctrl: ctrl}
	mock.recorder = &MockBitmapMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBitmap) EXPECT() *MockBitmapMockRecorder {
	return m.recorder
}

// CheckBits mocks base method.
func (m *MockBitmap) CheckBits(locs []uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckBits", locs)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckBits indicates an expected call of CheckBits.
func (mr *MockBitmapMockRecorder) CheckBits(locs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckBits", reflect.TypeOf((*MockBitmap)(nil).CheckBits), locs)
}

// SetBits mocks base method.
func (m *MockBitmap) SetBits(locs []uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBits", locs)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetBits indicates an expected call of SetBits.
func (mr *MockBitmapMockRecorder) SetBits(locs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBits", reflect.TypeOf((*MockBitmap)(nil).SetBits), locs)
}
